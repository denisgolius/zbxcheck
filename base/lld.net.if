#!/usr/local/python/bin/python
# -*- coding: UTF-8 -*-
#
# 2.0.3 Notes:
# set snmp version
#
# 2.0.2 Notes:
# filter all ethernetCsmacd and gigabitEthernet interface
#
# 2.0.1 Notes:
# distinguish between empty result and exception
#
# 2.0.0 Notes:
# change from bash to python
#
import sys
import traceback
from optparse import OptionParser
import snmplib

VERSION = '2.0.3'
ERROR = 'ZBX_NOTSUPPORTED'
SNMPV = 2
parser = None

# .1.3.6.1.2.1.2.2.1.2 ifDescr
# .1.3.6.1.2.1.2.2.1.8 ifOperStatus
# .1.3.6.1.2.1.2.2.1.3 ifType
#
# This rule:
#    filter all interfaces with:
#        ifOperStatus up(1)
#        ifType       ethernetCsmacd(6)
#        ifType       gigabitEthernet(117)
#    return index and description of these interfaces
RULE = ('.1.3.6.1.2.1.2.2.1.2',
        [('.1.3.6.1.2.1.2.2.1.8',
         lambda x: x == '1'),
         ('.1.3.6.1.2.1.2.2.1.3',
         lambda x: x in ('6', '117'))])


def cmd_error(message):
    print ERROR
    print message
    parser.print_help()
    sys.exit(1)


def proc_error():
    snmplib.log(traceback.format_exc())
    print ERROR
    sys.exit(1)


def opt_parse():
    global parser

    usage = '%prog hostname community [-v]'

    parser = OptionParser(usage=usage, version=VERSION)
    parser.add_option('-v', '--verbose', action='store_true',
                      dest='verbose', default=False,
                      help='print verbose infomation')
    (options, args) = parser.parse_args()
    # setting verbose
    snmplib.verbose = options.verbose

    if len(args) < 2:
        cmd_error('too few parameters.\n')
    else:
        return args

if __name__ == '__main__':
    try:
        args = opt_parse()
        items = snmplib.lld_process(args[0], args[1], SNMPV, RULE)
        print snmplib.lld_format(items)
    except Exception:
        proc_error()
