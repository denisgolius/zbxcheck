#!/usr/local/python/bin/python
# -*- coding: UTF-8 -*-

import sys
import traceback
from optparse import OptionParser
import snmplib

VERSION = '1.0.0'
ERROR = 'ZBX_NOTSUPPORTED'
parser = None

RULES = {
    # luDevDescription
    'ps':    ('.1.3.6.1.4.1.1714.1.1.9.1.8',
    # luDevTypeCode == 1
              [('.1.3.6.1.4.1.1714.1.1.9.1.6',
               lambda x: x == '1'),
    #luDevStatus bit[7] == 0 (present)
               ('.1.3.6.1.4.1.1714.1.1.9.1.13',
               lambda x: int(x) < 128)]),
    # luDevDescription
    'bat':   ('.1.3.6.1.4.1.1714.1.1.9.1.8',
    # luDevTypeCode == 11
              [('.1.3.6.1.4.1.1714.1.1.9.1.6',
               lambda x: x == '11'),
    #luDevStatus bit[7] == 0 (present)
               ('.1.3.6.1.4.1.1714.1.1.9.1.13',
               lambda x: int(x) < 128)]),
    # luDevDescription
    'fan':   ('.1.3.6.1.4.1.1714.1.1.9.1.8',
    # luDevTypeCode == 2
              [('.1.3.6.1.4.1.1714.1.1.9.1.6',
               lambda x: x == '2'),
    #luDevStatus bit[7] == 0 (present)
               ('.1.3.6.1.4.1.1714.1.1.9.1.13',
               lambda x: int(x) < 128)]),
    # luDevDescription
    'temp':  ('.1.3.6.1.4.1.1714.1.1.9.1.8',
    # luDevTypeCode == 3
              [('.1.3.6.1.4.1.1714.1.1.9.1.6',
               lambda x: x == '3'),
    #luDevStatus bit[7] == 0 (present)
               ('.1.3.6.1.4.1.1714.1.1.9.1.13',
               lambda x: int(x) < 128)])
}


def cmd_error(message):
    print ERROR
    print message
    parser.print_help()
    sys.exit(1)


def proc_error():
    snmplib.log(traceback.format_exc())
    print ERROR
    sys.exit(1)


def opt_parse():
    global parser

    usage = '''
    %prog hostname community component [-v]

    component:
        ps      -- PowerSupply
        bat     -- Battery
        fan     -- Fan
        temp    -- Temperature Sensor
    '''

    parser = OptionParser(usage=usage, version=VERSION)
    parser.add_option('-v', '--verbose', action='store_true',
                      dest='verbose', default=False,
                      help='print verbose infomation')
    (options, args) = parser.parse_args()
    # setting verbose
    snmplib.verbose = options.verbose

    if len(args) < 3:
        cmd_error('too few parameters.\n')
    elif args[2] not in RULES.keys():
        cmd_error('component is invalidate.\n')
    else:
        return args

if __name__ == '__main__':
    try:
        args = opt_parse()
        items = snmplib.lld_process(args[0], args[1], RULES[args[2]])
        print snmplib.lld_format(items)
    except Exception:
        proc_error()
