#!/usr/local/python/bin/python
# -*- coding: UTF-8 -*-
#
# only support V100RXXXCXX now
#
import argparse
import traceback
import logging
import paramiko
import re
import json
import functools

VERSION = '1.0.0'
ERROR = 'ZBX_NOTSUPPORTED'

# init logging
LOG_FORMAT = '%(levelname)s\t%(asctime)s\t%(message)s'
logging.basicConfig(level=logging.WARNING, format=LOG_FORMAT)
logger = logging.getLogger(__name__)

OLD = 'OLD'
NEW = 'NEW'


# repeat maybe is a good idea :)
def controller_old_proc(info):
    pattern = r'Controller ID\s+\|\s+(\w+).*\n'
    for each in re.findall(pattern, info):
        yield '_'.join(each)


def enclosure_old_proc(info):
    pattern = r'(\d+).*\n'
    for each in re.findall(pattern, info):
        yield '_'.join(each)


def power_old_proc(info):
    pattern = r'(\d+)\s+(\w+).*\n'
    for each in re.findall(pattern, info):
        yield '_'.join(each)


def fan_old_proc(info):
    pattern = r'Enclosure ID\s+\|\s+(\d+).*\n\s*Fan ID\s+\|\s+(\d+)'
    for each in re.findall(pattern, info):
        yield '_'.join(each)


def bbu_old_proc(info):
    pattern = r'Controller ID\s+\|\s+(\w+).*\n\s*BBU ID\s+\|\s+(\d+)'
    for each in re.findall(pattern, info):
        yield '_'.join(each)


def disk_old_proc(info):
    pattern = r'\((\d+)\,(\d+)\)'
    for each in re.findall(pattern, info):
        yield '_'.join(each)


LLD_RULES = {
    'controller': {
        'OLD': ('showcontroller', controller_old_proc),
    },
    'enclosure': {
        'OLD': ('showenclosure', enclosure_old_proc),
    },
    'power': {
        'OLD': ('showpower', power_old_proc),
    },
    'fan': {
        'OLD': ('showfan', fan_old_proc),
    },
    'bbu': {
        'OLD': ('showbbu', bbu_old_proc),
    },
    'disk': {
        'OLD': ('showdisk -physic', disk_old_proc),
    }
}


class SSH_SHELL(object):
    TIMEOUT = 10
    WIDTH_CHAR = 800
    HEIGHT_CHAR = 600
    RECV_WINDOW = 4096
    CMD_END = ':/>'
    CMD_MORE = '--More--'

    def __init__(self, hostname, username, password):
        self.client = paramiko.SSHClient()
        self.client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        self.client.connect(hostname,
                            username=username,
                            password=password,
                            look_for_keys=False,
                            allow_agent=False,
                            timeout=self.TIMEOUT)
        self.channel = self.client.invoke_shell(width=self.WIDTH_CHAR,
                                                height=self.HEIGHT_CHAR)
        logger.debug('connect host [%s] success' % hostname)

    def send(self, command):
        self.channel.send(command + '\n')
        logger.debug('send command: %s', command)

    def recv(self):
        buff = ''
        while not buff.endswith(self.CMD_END):
            buff += self.channel.recv(self.RECV_WINDOW)
            if buff.endswith(self.CMD_MORE):
                self.channel.send(' ')
        logger.debug('recevie response: %s', buff)
        return buff


def lld_format(items, debug):
    result = {}
    result['data'] = items
    if debug:
        return json.dumps(result, encoding='utf-8', indent=4)
    else:
        return json.dumps(result, encoding='utf-8')


def lld_process(hostname, username, password, component):
    shell = SSH_SHELL(hostname, username, password)

    # query version
    sys_info = shell.recv()
    code = re.findall('Product Version\s*[:|]\s*V(\d{3}).*', sys_info)
    if code:
        if code[0] == '100':
            version = OLD
        else:
            # disable new version support
            version = NEW
            return ERROR
    else:
        return ERROR
    logger.debug('version is [%s]' % version)

    # query component info list
    (command, process) = LLD_RULES[component][version]
    shell.send(command)
    info = shell.recv()

    # process component info list
    items = map(lambda x: {'{#NAME}': x}, process(info))
    return lld_format(items)


def main():
    global lld_format

    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description='''
low discovery huawei oceanstor components:
    controller
    enclosure
    power
    fan
    bbu
    disk''')
    parser.add_argument('-v', dest='verbose', action='store_true',
                        help='verbose mode')
    parser.add_argument('hostname', help='hostname')
    parser.add_argument('username', help='username')
    parser.add_argument('password', help='password')
    parser.add_argument('component', help='component')
    args = parser.parse_args()

    # debug mode setting
    if args.verbose:
        lld_format = functools.partial(lld_format, debug=True)
        logger.setLevel(logging.DEBUG)
    else:
        lld_format = functools.partial(lld_format, debug=False)

    result = ERROR
    try:
        result = lld_process(args.hostname, args.username, args.password,
                             args.component)
    except Exception:
        logger.debug(traceback.format_exc())
    print result


if __name__ == '__main__':
    main()
