#!/bin/bash
#
# 1.0.2 Notes:
# add sps lld check
# add sps cable lld check
# add bbu lld check
#
# 1.0.1 Notes:
# add naviseccli -np option to reduce exec time
# fix io check bug
#
readonly VERSION="1.0.2"
readonly PROGNAME=$(basename $0)
readonly PROGDIR=$(dirname $0)
readonly ARGS="$@"
readonly ARGN="$#"

# please change the naviseccli file localtion
# and add naviseccli user security first (zabbix user)
# naviseccli -AddUserSecurity -user xxxx -password xxxxx -scope 0
readonly NAVISECCLI="/opt/Navisphere/bin/naviseccli -secfilepath /home/zabbix"

parse() {
    if [ 0 -eq $ARGN ]; then
        usage
        exit
    fi

    while getopts ":h" opt; do
        case "$opt" in
        "h")
            usage
            exit
        ;;

        *)
            echo "Invalid option: -$OPTARG"
            usage
            exit
        ;;
        esac
    done
}

usage() {
cat << EOF

    version: $VERSION
    usage:
        $PROGNAME hostname spa              -- status of SP A
        $PROGNAME hostname spb              -- status of SP B
        $PROGNAME hostname cpua             -- status of CPU module on SP A
        $PROGNAME hostname cpub             -- status of CPU module on SP B
        $PROGNAME hostname dimma            -- status of DIMM module on SP A
        $PROGNAME hostname dimmb            -- status of DIMM module on SP B
        $PROGNAME hostname sps      sp      -- status of SPS
        $PROGNAME hostname spscable sp      -- status of SPS Cable
        $PROGNAME hostname bbu      sp      -- status of BBU
        $PROGNAME hostname io       id      -- status of I/O Module
        $PROGNAME hostname lcc      id      -- status of LCC
        $PROGNAME hostname fan      id      -- status of FAN
        $PROGNAME hostname spepower id      -- status of SPE Power
        $PROGNAME hostname encpower id      -- status of Enclosure Power
        $PROGNAME hostname disk     id      -- status of Disk

EOF
}

valid_comm() {
    local STATE="$1"

    if [ -z "$STATE" ]; then
        echo "ZBX_NOTSUPPORTED"
        exit 1
    fi

    if [[ "Present" = "$STATE" \
        || "Valid" = "$STATE" ]]; then
        echo 1
    else
        echo 0
    fi
}

valid_disk() {
    local STATE="$1"

    if [ -z "$STATE" ]; then
        echo "ZBX_NOTSUPPORTED"
        exit 1
    fi

    if [[ "Binding" = "$STATE" \
            || "Enabled" = "$STATE"
            || "Expanding" = "$STATE"
            || "Formatting" = "$STATE"
            || "Powering Up" = "$STATE"
            || "Ready" = "$STATE"
            || "Full Power" = "$STATE"
            || "Low Power" = "$STATE"
            || "Reduced Power, Transitioning" = "$STATE"
            || "Hot Spare Ready" = "$STATE"
            || "Unbound" = "$STATE"
            || "Unformatted" = "$STATE" ]]; then
        echo 1
    else
        echo 0
    fi
}

check() {
    local HOSTNAME="$1"
    local ITEMNAME="$2"
    local ITEMPARM="$3"

    case "$ITEMNAME" in
    "spa")
        local STATE=$($NAVISECCLI -h "$HOSTNAME" -np getcrus -spa \
                        | sed -n "s/SP A State: *\([A-Za-z]*\)/\1/gp")
        valid_comm "$STATE"
    ;;

    "spb")
        local STATE=$($NAVISECCLI -h "$HOSTNAME" -np getcrus -spb \
                        | sed -n "s/SP B State: *\([A-Za-z]*\)/\1/gp")
        valid_comm "$STATE"
    ;;

    "cpua")
        local STATE=$($NAVISECCLI -h "$HOSTNAME" -np getcrus -cpua \
                        | sed -n "s/.*CPU Module A State: *\([A-Za-z]*\)/\1/gp")
        valid_comm "$STATE"
    ;;

    "cpub")
        local STATE=$($NAVISECCLI -h "$HOSTNAME" -np getcrus -cpub \
                        | sed -n "s/.*CPU Module B State: *\([A-Za-z]*\)/\1/gp")
        valid_comm "$STATE"
    ;;

    "dimma")
        local STATE=$($NAVISECCLI -h "$HOSTNAME" -np getcrus -dimma \
                        | sed -n "s/.*DIMM Module A State: *\([A-Za-z]*\)/\1/gp")
        valid_comm "$STATE"
    ;;

    "dimmb")
        local STATE=$($NAVISECCLI -h "$HOSTNAME" -np getcrus -dimmb \
                        | sed -n "s/.*DIMM Module B State: *\([A-Za-z]*\)/\1/gp")
        valid_comm "$STATE"
    ;;

    "sps")
        local SP="$ITEMPARM"

        if [ -z "$SP" ]; then
            echo "ZBX_NOTSUPPORTED"
            exit 1
        fi

        local STATE=$($NAVISECCLI -h "$HOSTNAME" -np getcrus -all \
                        | sed -n "s/.*SPS $SP State: *\([A-Za-z]*\)/\1/gp")
        valid_comm "$STATE"
    ;;

    "spscable")
        local SP="$ITEMPARM"

        if [ -z "$SP" ]; then
            echo "ZBX_NOTSUPPORTED"
            exit 1
        fi

        local STATE=$($NAVISECCLI -h "$HOSTNAME" -np getcrus -all \
                        | sed -n "s/.*SPS $SP Cabling State: *\([A-Za-z]*\)/\1/gp")
        valid_comm "$STATE"
    ;;

    "bbu")
        local SP="$ITEMPARM"

        if [ -z "$SP" ]; then
            echo "ZBX_NOTSUPPORTED"
            exit 1
        fi

        local STATE=$($NAVISECCLI -h "$HOSTNAME" -np getcrus -all \
                        | sed -n "s/.*BBU $SP State: *\([A-Za-z]*\)/\1/gp")
        valid_comm "$STATE"
    ;;

    "io")
        local SP=$(echo "$ITEMPARM" | awk -F_ '{print $1}')
        local MODULE=$(echo "$ITEMPARM" | awk -F_ '{print $2}')

        if [ -z "$SP" ] || [ -z "$MODULE" ]; then
            echo "ZBX_NOTSUPPORTED"
            exit 1
        fi

        local STATE=$($NAVISECCLI -h "$HOSTNAME" -np getcrus -all \
                        | sed -n "s/.*SP $SP I\/O Module $MODULE State: *\([A-Za-z]*\)/\1/gp")
        valid_comm "$STATE"
    ;;

    "lcc")
        local BUS=$(echo "$ITEMPARM" | awk -F_ '{print $1}')
        local ENCL=$(echo "$ITEMPARM" | awk -F_ '{print $2}')
        local SP=$(echo "$ITEMPARM" | awk -F_ '{print $3}')

        if [ -z "$BUS" ] || [ -z "$ENCL" ] || [ -z "$SP" ]; then
            echo "ZBX_NOTSUPPORTED"
            exit 1
        fi

        local STATE=$($NAVISECCLI -h "$HOSTNAME" -np getcrus \
                        | sed -n "s/Bus $BUS Enclosure $ENCL LCC $SP State: *\([A-Za-z]*\)/\1/gp")

        valid_comm "$STATE"
    ;;

    "fan")
        local BUS=$(echo "$ITEMPARM" | awk -F_ '{print $1}')
        local ENCL=$(echo "$ITEMPARM" | awk -F_ '{print $2}')
        local SP=$(echo "$ITEMPARM" | awk -F_ '{print $3}')

        if [ -z "$BUS" ] || [ -z "$ENCL" ] || [ -z "$SP" ]; then
            echo "ZBX_NOTSUPPORTED"
            exit 1
        fi

        local STATE=$($NAVISECCLI -h "$HOSTNAME" -np getcrus \
                        | sed -n "s/Bus $BUS Enclosure $ENCL Fan $SP State: *\([A-Za-z]*\)/\1/gp")
        valid_comm "$STATE"
    ;;

    "spepower")
        local SPE="$ITEMPARM"

        if [ -z "$SPE" ]; then
            echo "ZBX_NOTSUPPORTED"
            exit 1
        fi

        local STATE=$($NAVISECCLI -h "$HOSTNAME" -np getcrus \
                        | sed -n "s/.*SPE Power $SPE State: *\([A-Za-z]*\)/\1/gp")
        valid_comm "$STATE"
    ;;

    "encpower")
        local BUS=$(echo "$ITEMPARM" | awk -F_ '{print $1}')
        local ENCL=$(echo "$ITEMPARM" | awk -F_ '{print $2}')
        local SP=$(echo "$ITEMPARM" | awk -F_ '{print $3}')

        if [ -z "$BUS" ] || [ -z "$ENCL" ] || [ -z "$SP" ]; then
            echo "ZBX_NOTSUPPORTED"
            exit 1
        fi

        local STATE=$($NAVISECCLI -h "$HOSTNAME" -np getcrus \
                        | sed -n "s/Bus $BUS Enclosure $ENCL Power $SP State: *\([A-Za-z]*\)/\1/gp")
        valid_comm "$STATE"
    ;;

    "disk")
        local DISK="$ITEMPARM"

        if [ -z "$DISK" ]; then
            echo "ZBX_NOTSUPPORTED"
            exit 1
        fi

        local STATE=$($NAVISECCLI -h "$HOSTNAME" -np getdisk "$DISK" -state \
                        | sed -n "s/State: *\([A-Za-z]*\)/\1/gp")
        valid_disk "$STATE"
    ;;

    *)
        echo "ZBX_NOTSUPPORTED"
        exit 1
    ;;
    esac
}

main() {
    parse $ARGS
    check $ARGS
}

main
