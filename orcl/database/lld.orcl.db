#!/usr/local/python/bin/python
# -*- coding: UTF-8 -*-

import sys
import time
import json
import socket
import traceback
from optparse import OptionParser

VERSION = '1.0.1'
ERROR = 'ZBX_NOTSUPPORTED'
parser = None
verbose = False

# Please create user and grant privileges in each database.
# Ref: db_user.sql for detail.
USERNAME = 'raidmirror'  # oracle username
PASSWORD = 'raidmirror'  # oralce password

# mcdb server parameters
MCDB_HOST = '127.0.0.1'
MCDB_PORT = 10061
MCDB_CODE = 'ORCL'
BUFFER_SIZE = 1024 * 8

LLD_SQL = {
    # component name: lld sql
    'dts': '''
        select a.ts#, a.name
          from v$tablespace a, dba_tablespaces b
         where a.name = b.tablespace_name
           and b.contents in (\'PERMANENT\', \'UNDO\')''',
    'tts': '''
        select a.ts#, a.name
          from v$tablespace a, dba_tablespaces b
         where a.name = b.tablespace_name
           and b.contents = \'TEMPORARY\'''',
    'df': '''
        select file_id, file_name
          from dba_data_files''',
    'tf': '''
        select file_id, file_name
          from dba_temp_files''',
    'dg': '''
        select group_number, name
          from v$asm_diskgroup''',
    'dk': '''
        select group_number || '_' || disk_number, path
          from v$asm_disk'''
}


def log(message):
    if verbose:
        print '%s %s' % (time.strftime('%Y%m%d %H:%M:%S'), message)


def cmd_error(message):
    print ERROR
    print message
    parser.print_help()
    sys.exit(1)


def proc_error():
    log(traceback.format_exc())
    print ERROR
    sys.exit(1)


def client(request):
    # send request to mcdb
    address = (MCDB_HOST, MCDB_PORT)
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect(address)
    log('connect mcdb server success')
    try:
        sock.sendall(request)
        log('send request success')
        response = sock.recv(BUFFER_SIZE)
        log('receive response success: %s' % response)
        return response.strip()
    finally:
        sock.close()


def opt_parse():
    global verbose
    global parser

    usage = '''
    %prog hostname port sid component [-v]

    component:
        dts    -- data tablespaces
        tts    -- temp tablespaces
        df     -- data files
        tf     -- temp files
        dg     -- disk groups
        dk     -- disks
    '''

    parser = OptionParser(usage=usage, version=VERSION)
    parser.add_option('-v', '--verbose', action='store_true',
                      dest='verbose', default=False,
                      help='print verbose infomation')
    (options, args) = parser.parse_args()
    verbose = options.verbose

    if len(args) < 4:
        cmd_error('too few parameters.\n')
    elif args[3] not in LLD_SQL:
        cmd_error('component is invalidate.\n')
    else:
        return args


def lld_format(items):
    result = {}
    result['data'] = items
    if verbose:
        return json.dumps(result, encoding='utf-8', indent=4)
    else:
        return json.dumps(result, encoding='utf-8')


def lld_process(hostname, port, sid, component):
    # mcdb server request protocal:
    # format as json
    # {
    #     "code": "ORCL",
    #     "host": "xxx",
    #     "port": "xxx",
    #     "name": "xxx",
    #     "user": "xxx",
    #     "pswd": "xxx",
    #     "sql": "xxx",
    #     "args": [xxx] -> optional
    # }
    query = {
        'code': MCDB_CODE,
        'host': hostname,
        'port': port,
        'name': sid,
        'user': USERNAME,
        'pswd': PASSWORD,
        'sql': LLD_SQL[component]
    }
    request = json.dumps(query)
    payload = client(request)
    response = json.loads(payload)

    # mcdb response protocal:
    # format as json
    # {
    #     "code": "xxx",
    #     "data": "xxx"
    # }
    # code 0000 - success
    # code 0001 - request format is invalid
    # code 0002 - request key is required
    # code 0003 - request database is unsupported
    # code 0004 - database connection error
    # code 0005 - database execution error
    # code 00FF - encountered an unknown error
    items = []
    code = response['code']
    data = response['data']
    if code == '0000':
        log('query success with data [%s]' % data)
        for row in data:
            item = {}
            item['{#INDEX}'] = row[0]
            item['{#NAME}'] = row[1]
            items.append(item)
    else:
        log('query failed with code [%s]' % code)
    return items

if __name__ == '__main__':
    try:
        args = opt_parse()
        items = lld_process(*args)
        print lld_format(items)
    except Exception:
        proc_error()
