#!/usr/local/python/bin/python
# -*- coding: UTF-8 -*-

import sys
from optparse import OptionParser
from pysphere import VIServer

VERSION = '1.0.0'


def host_print(server):
    # Please ref:
    # VMware vSphere API Reference > Managed Object Types > HostSystem
    prop_names = [
        "summary.config.name",
        "summary.hardware.uuid",
        "runtime.powerState"]

    prop_list = server._retrieve_properties_traversal(
        property_names=prop_names,
        obj_type="HostSystem")

    print "\nTotal %d Hosts:\n" % (len(prop_list))
    for prop in prop_list:
        name = None
        uuid = None
        state = None
        for ps in prop.PropSet:
            if ps.Name == "summary.config.name":
                name = ps.Val
            elif ps.Name == "summary.hardware.uuid":
                uuid = ps.Val
            elif ps.Name == "runtime.powerState":
                state = ps.Val
        print "%-25s\t%s\t%s" % (name, uuid, state)


def vm_print(server):
    # Please ref:
    # VMware vSphere API Reference > Managed Object Types > VirtualMachine
    prop_names = [
        "config.name",
        "config.instanceUuid",
        "guest.ipAddress",
        "runtime.powerState"]

    prop_list = server._retrieve_properties_traversal(
        property_names=prop_names,
        obj_type="VirtualMachine")

    print "\nTotal %d VMs:\n" % (len(prop_list))
    for prop in prop_list:
        name = None
        uuid = None
        ip = None
        state = None
        for ps in prop.PropSet:
            if ps.Name == "config.name":
                name = ps.Val
            elif ps.Name == "config.instanceUuid":
                uuid = ps.Val
            elif ps.Name == "guest.ipAddress":
                ip = ps.Val
            elif ps.Name == "runtime.powerState":
                state = ps.Val
        print "%-25s\t%s\t%-15s\t%s" % (name, uuid, ip, state)

    # method 2: simple but slow version
    '''
    vms = server.get_registered_vms()
    for vmpath in vms:
        vm = server.get_vm_by_path(vmpath)
        print "%s\t%s\t%s\t%s" % (
            vm.properties.config.name,
            vm.properties.config.instanceUuid,
            vm.get_property('ip_address'),
            vm.get_status())
    '''


def opt_parse():
    global verbose
    usage = '''
    %prog host user passwd

    host     -- vcenter or physical host ip address
    user     -- vcenter or physical host username
    passwd   -- vcenter or physical host password
    '''

    parser = OptionParser(usage=usage, version=VERSION)
    parser.add_option('-v', '--verbose', action='store_true',
                      dest='verbose', default=False,
                      help='print verbose infomation')
    (options, args) = parser.parse_args()
    verbose = options.verbose

    if len(args) < 3:
        print 'too few parameters.\n'
        parser.print_help()
        sys.exit(-1)
    else:
        return args

if __name__ == '__main__':
    args = opt_parse()

    server = VIServer()
    try:
        server.connect(args[0], args[1], args[2])
    except Exception as e:
        print "connection to %s failed: %s" % (args[0], e)
        sys.exit(-1)

    host_print(server)
    vm_print(server)

    try:
        server.disconnect()
    except Exception as e:
        sys.exit(-1)
